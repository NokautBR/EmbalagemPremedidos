//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 06/05/2016 17:40:40
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace EmbalagemPremedidos
{

    [DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class Dados : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(Dados));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertProduto(Produto instance);
        partial void UpdateProduto(Produto instance);
        partial void DeleteProduto(Produto instance);

        #endregion

        public Dados() :
        base(GetConnectionString("DadosContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public Dados(MappingSource mappingSource) :
        base(GetConnectionString("DadosContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public Dados(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Dados(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Dados(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Dados(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Produto> Produto
        {
            get
            {
                return this.GetTable<Produto>();
            }
        }
    }
}

namespace EmbalagemPremedidos
{

    /// <summary>
    /// There are no comments for EmbalagemPremedidos.Produto in the schema.
    /// </summary>
    [Table(Name = @"""main"".Produto")]
    public partial class Produto : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _CodBarra;

        private double _PesoEmbalagem;

        private string _Descricao;

        private System.DateTime _Data;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnCodBarraChanging(string value);
        partial void OnCodBarraChanged();
        partial void OnPesoEmbalagemChanging(double value);
        partial void OnPesoEmbalagemChanged();
        partial void OnDescricaoChanging(string value);
        partial void OnDescricaoChanged();
        partial void OnDataChanging(System.DateTime value);
        partial void OnDataChanged();
        #endregion

        public Produto()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for CodBarra in the schema.
        /// </summary>
        [Column(Storage = "_CodBarra", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CodBarra
        {
            get
            {
                return this._CodBarra;
            }
            set
            {
                if (this._CodBarra != value)
                {
                    this.OnCodBarraChanging(value);
                    this.SendPropertyChanging();
                    this._CodBarra = value;
                    this.SendPropertyChanged("CodBarra");
                    this.OnCodBarraChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PesoEmbalagem in the schema.
        /// </summary>
        [Column(Storage = "_PesoEmbalagem", CanBeNull = false, DbType = "FLOAT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double PesoEmbalagem
        {
            get
            {
                return this._PesoEmbalagem;
            }
            set
            {
                if (this._PesoEmbalagem != value)
                {
                    this.OnPesoEmbalagemChanging(value);
                    this.SendPropertyChanging();
                    this._PesoEmbalagem = value;
                    this.SendPropertyChanged("PesoEmbalagem");
                    this.OnPesoEmbalagemChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Descricao in the schema.
        /// </summary>
        [Column(Storage = "_Descricao", DbType = "NVARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Descricao
        {
            get
            {
                return this._Descricao;
            }
            set
            {
                if (this._Descricao != value)
                {
                    this.OnDescricaoChanging(value);
                    this.SendPropertyChanging();
                    this._Descricao = value;
                    this.SendPropertyChanged("Descricao");
                    this.OnDescricaoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Data in the schema.
        /// </summary>
        [Column(Storage = "_Data", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if (this._Data != value)
                {
                    this.OnDataChanging(value);
                    this.SendPropertyChanging();
                    this._Data = value;
                    this.SendPropertyChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
